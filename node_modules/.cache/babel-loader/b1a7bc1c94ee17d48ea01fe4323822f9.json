{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ryanbraun/Desktop/reacttest/my-app/src/context.js\";\nimport React, { Component } from 'react';\nimport { storeProducts, detailProduct } from \"./data\";\nconst ProductContext = /*#__PURE__*/React.createContext(); //Provider\n//Consumer\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      detailProduct: detailProduct,\n      cart: [],\n      modalOpen: false,\n      modalProduct: detailProduct,\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0\n    };\n\n    this.setProducts = () => {\n      let tempProducts = [];\n      storeProducts.forEach(item => {\n        const singleItem = { ...item\n        };\n        tempProducts = [...tempProducts, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: tempProducts\n        };\n      });\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.price;\n      product.total = price;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        this.addTotals();\n        localStorage.setItem('myCart', JSON.stringify(this.state.cart));\n      });\n    };\n\n    this.openModal = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          modalProduct: product,\n          modalOpen: true\n        };\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState(() => {\n        return {\n          modalOpen: false\n        };\n      });\n    };\n\n    this.increment = id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.id === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.count = product.count + 1;\n      product.total = product.count * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n        localStorage.setItem('myCart', JSON.stringify(this.state.cart));\n      });\n    };\n\n    this.decrement = id => {\n      let tempCart = [...this.state.cart];\n      const selectedProduct = tempCart.find(item => item.id === id);\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.count = product.count - 1;\n\n      if (product.count === 0) {\n        this.removeItem(id);\n      } else {\n        product.total = product.count * product.price;\n        this.setState(() => {\n          return {\n            cart: [...tempCart]\n          };\n        }, () => {\n          this.addTotals();\n        });\n      }\n    };\n\n    this.removeItem = id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart = false;\n      removedProduct.count = 0;\n      removedProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.setProducts();\n        this.addTotals();\n        localStorage.setItem('myCart', JSON.stringify(this.state.cart));\n      });\n    };\n\n    this.addTotals = () => {\n      let subTotal = 0;\n      this.state.cart.map(item => subTotal += item.total);\n      const tempTax = subTotal * 0.1;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setProducts();\n    const cart = localStorage.getItem('myCart');\n    this.setState({\n      cart: JSON.parse(cart) ? JSON.parse(cart) : []\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ProductContext.Provider, {\n      value: { ...this.state,\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart,\n        openModal: this.openModal,\n        closeModal: this.closeModal,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["/Users/ryanbraun/Desktop/reacttest/my-app/src/context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","cart","modalOpen","modalProduct","cartSubTotal","cartTax","cartTotal","setProducts","tempProducts","forEach","item","singleItem","setState","getItem","id","product","find","handleDetail","addToCart","index","indexOf","inCart","count","price","total","addTotals","localStorage","setItem","JSON","stringify","openModal","closeModal","increment","tempCart","selectedProduct","decrement","removeItem","filter","removedProduct","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","componentDidMount","parse","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {storeProducts, detailProduct} from \"./data\"\n\nconst ProductContext = React.createContext();\n//Provider\n//Consumer\n\nclass ProductProvider extends Component {\n    state = {\n        products: [],\n        detailProduct: detailProduct,\n        cart: [],\n        modalOpen: false,\n        modalProduct: detailProduct,\n        cartSubTotal:0,\n        cartTax:0,\n        cartTotal:0,\n    };\n    componentDidMount() {\n        this.setProducts();\n        const cart = localStorage.getItem('myCart')\n        this.setState({cart: JSON.parse(cart) ? JSON.parse(cart) : []})\n        \n    }\n    setProducts = () => {\n        let tempProducts =  [];\n        storeProducts.forEach(item => {\n            const singleItem = {...item};\n            tempProducts = [...tempProducts,singleItem];\n            \n        })\n        this.setState(()=> {\n            return {products:tempProducts}\n        });\n    };\n\n    getItem = id =>{\n        const product = this.state.products.find(item => item.id === id);\n        return product; \n    };\n    handleDetail = (id) => {\n        const product = this.getItem(id);\n        this.setState(()=>{\n            return {detailProduct:product}\n        })\n\n    };\n    addToCart = id => {\n        let tempProducts = [...this.state.products];\n        const index = tempProducts.indexOf(this.getItem(id))\n        ;\n        const product = tempProducts[index];\n        product.inCart = true;\n        product.count = 1;\n        const price = product.price;\n        product.total = price;\n        this.setState(()=> {\n            return {products:tempProducts,cart:[...this.state.cart,\n                product]};\n            },()=>{\n               this.addTotals();\n               localStorage.setItem('myCart', JSON.stringify(this.state.cart))\n        });\n\n        \n    };\n    openModal = id => {\n        const product = this.getItem(id);\n        this.setState(()=>{\n            return {modalProduct:product,modalOpen:true}\n        })\n    }\n    closeModal = () => {\n        this.setState(()=>{\n            return {modalOpen:false}\n        })\n    };\n    increment = (id) =>{\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item=>item.id === id)\n\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n\n        product.count = product.count + 1;\n        product.total = product.count * product.price;\n\n        this.setState(\n            ()=>{\n                return{cart:[...tempCart]}\n            },\n            ()=>{this.addTotals();\n                localStorage.setItem('myCart', JSON.stringify(this.state.cart))\n            }\n            );\n    };\n    decrement = (id) =>{\n        let tempCart = [...this.state.cart];\n        const selectedProduct = tempCart.find(item=>item.id === id)\n\n        const index = tempCart.indexOf(selectedProduct);\n        const product = tempCart[index];\n\n        product.count = product.count - 1;\n        \n        if(product.count === 0) {\n            this.removeItem(id)\n        } \n        else {\n            product.total = product.count * product.price;\n            this.setState(\n                ()=>{\n                    return{cart:[...tempCart]}\n                },\n                ()=>{this.addTotals();\n                }\n                );\n        }\n        \n    };\n    removeItem = (id) =>{\n        let tempProducts = [...this.state.products];\n        let tempCart = [...this.state.cart];\n\n        tempCart = tempCart.filter(item => item.id !== id);\n\n        const index = tempProducts.indexOf(this.getItem(id));\n        let removedProduct = tempProducts[index];\n        removedProduct.inCart = false;\n        removedProduct.count = 0;\n        removedProduct.total = 0;\n\n        this.setState(()=>{\n            return {\n                cart: [...tempCart],\n                products: [...tempProducts]\n            }\n        },()=>{\n            this.addTotals();\n        })\n    }\n    clearCart = () => {\n        this.setState(()=>{\n            return {cart:[]}\n        },()=>{\n            this.setProducts();\n            this.addTotals();\n            localStorage.setItem('myCart', JSON.stringify(this.state.cart))\n        });\n    };\n    addTotals = () => {\n        let subTotal = 0;\n        this.state.cart.map(item =>(subTotal += item.total));\n        const tempTax = subTotal * 0.1;\n        const tax = parseFloat(tempTax.toFixed(2));\n        const total = subTotal + tax;\n        this.setState(()=>{\n            return {\n                cartSubTotal:subTotal,\n                cartTax:tax,\n                cartTotal:total\n            }\n        })\n    }\n    render() {\n        return (\n            <ProductContext.Provider value = {{\n                ...this.state,\n                handleDetail:this.handleDetail,\n                addToCart: this.addToCart,\n                openModal:this.openModal,\n                closeModal:this.closeModal,\n                increment:this.increment,\n                decrement:this.decrement,\n                removeItem:this.removeItem,\n                clearCart:this.clearCart\n            }}>\n                {this.props.children}\n            </ProductContext.Provider>\n        )\n    }\n}\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport {ProductProvider,ProductConsumer};"]},"metadata":{},"sourceType":"module"}