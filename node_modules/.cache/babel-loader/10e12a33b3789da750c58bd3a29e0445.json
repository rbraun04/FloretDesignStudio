{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ryanbraun/Desktop/reacttest/my-app/src/components/Portfolio/Grid.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Measure from 'react-measure';\nimport { Transition, animated, interpolate } from 'react-spring/renderprops';\nconst styles = {\n  outer: {\n    position: 'absolute',\n    width: '800px',\n    height: '800px'\n  },\n  inner: {\n    position: 'relative',\n    width: '100%',\n    overflow: 'hidden',\n    minHeight: '100%'\n  },\n  cell: {\n    position: 'absolute',\n    willChange: 'transform, width, height, opacity'\n  }\n};\nexport default class Grid extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      width: 0,\n      height: 0,\n      open: undefined,\n      lastOpen: undefined\n    };\n\n    this.scrollOut = e => {\n      if (!this.props.lockScroll) {\n        this.state.open && this.toggle(undefined);\n        this.clicked = false;\n      }\n    };\n\n    this.toggle = key => this.setState(state => ({\n      lastOpen: state.open,\n      open: state.open === key ? undefined : key\n    }), () => this.clicked = true);\n\n    this.resize = (width, height, props) => this.setState({\n      [width]: props.client.width,\n      [height]: props.client.height\n    });\n\n    this.resizeOuter = props => this.resize('widthOuter', 'heightOuter', props);\n\n    this.resizeInner = props => this.resize('width', 'height', props);\n\n    this.update = ({\n      key,\n      x,\n      y,\n      width,\n      height\n    }) => {\n      const open = this.state.open === key;\n      return {\n        opacity: this.state.open && !open ? 0 : 1,\n        x: open ? this.outerRef.scrollLeft : x,\n        y: open ? this.outerRef.scrollTop : y,\n        width: open ? this.state.width : width,\n        height: open ? this.state.heightOuter : height\n      };\n    };\n  }\n\n  componentDidUpdate() {\n    this.clicked = false;\n  }\n\n  render() {\n    let {\n      children,\n      columns,\n      margin,\n      occupySpace,\n      impl,\n      config,\n      data,\n      keys,\n      heights,\n      closeDelay,\n      lockScroll,\n      ...rest\n    } = this.props;\n    let {\n      lastOpen,\n      open,\n      width\n    } = this.state;\n    let column = 0;\n    let columnHeights = new Array(columns).fill(0);\n    let displayData = data.map((child, i) => {\n      let index = occupySpace ? columnHeights.indexOf(Math.min(...columnHeights)) : column++ % columns;\n      let cellWidth = width / columns - margin / (1 - 1 / (columns + 1));\n      let left = cellWidth * index;\n      let offset = (index + 1) * margin;\n      let top = columnHeights[index] + margin;\n      let height = typeof heights === 'function' ? heights(child) : heights;\n      columnHeights[index] += height + margin;\n      return {\n        x: margin ? left + offset : left,\n        y: top,\n        width: cellWidth,\n        height,\n        key: keys(child),\n        object: child\n      };\n    });\n    const overflow = lockScroll ? open ? 'hidden' : 'auto' : 'auto';\n    const height = Math.max(...columnHeights) + margin;\n    return /*#__PURE__*/_jsxDEV(Measure, {\n      client: true,\n      innerRef: r => this.outerRef = r,\n      onResize: this.resizeOuter,\n      children: ({\n        measureRef\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: measureRef,\n        style: { ...styles.outer,\n          ...this.props.style,\n          overflow\n        },\n        ...rest,\n        onScroll: this.scrollOut,\n        onWheel: this.scrollOut,\n        onTouchMove: this.scrollOut,\n        children: /*#__PURE__*/_jsxDEV(Measure, {\n          client: true,\n          innerRef: r => this.innerRef = r,\n          onResize: this.resizeInner,\n          children: ({\n            measureRef\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: measureRef,\n            style: { ...styles.inner,\n              height\n            },\n            children: /*#__PURE__*/_jsxDEV(Transition, {\n              native: true,\n              items: displayData,\n              keys: d => d.key,\n              from: {\n                opacity: 0\n              },\n              leave: {\n                opacity: 0\n              },\n              enter: this.update,\n              update: this.update,\n              impl: impl,\n              config: { ...config,\n                delay: this.clicked && !open ? closeDelay : 0\n              },\n              children: (c, i) => ({\n                opacity,\n                x,\n                y,\n                width,\n                height\n              }) => /*#__PURE__*/_jsxDEV(animated.div, {\n                style: { ...styles.cell,\n                  opacity,\n                  width,\n                  height,\n                  zIndex: lastOpen === c.key || open === c.key ? 1000 : i,\n                  transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px, 0)`)\n                },\n                children: children(c.object, open === c.key, () => this.toggle(c.key))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nGrid.propTypes = {\n  data: PropTypes.array,\n  keys: PropTypes.func,\n  occupySpace: PropTypes.bool,\n  columns: PropTypes.number,\n  margin: PropTypes.number,\n  heights: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  lockScroll: PropTypes.bool,\n  closeDelay: PropTypes.number\n};\nGrid.defaultProps = {\n  occupySpace: true,\n  columns: 3,\n  margin: 0,\n  heights: 100,\n  lockScroll: false,\n  closeDelay: 0\n};","map":{"version":3,"sources":["/Users/ryanbraun/Desktop/reacttest/my-app/src/components/Portfolio/Grid.js"],"names":["React","PropTypes","Measure","Transition","animated","interpolate","styles","outer","position","width","height","inner","overflow","minHeight","cell","willChange","Grid","Component","state","open","undefined","lastOpen","scrollOut","e","props","lockScroll","toggle","clicked","key","setState","resize","client","resizeOuter","resizeInner","update","x","y","opacity","outerRef","scrollLeft","scrollTop","heightOuter","componentDidUpdate","render","children","columns","margin","occupySpace","impl","config","data","keys","heights","closeDelay","rest","column","columnHeights","Array","fill","displayData","map","child","i","index","indexOf","Math","min","cellWidth","left","offset","top","object","max","r","measureRef","style","innerRef","d","delay","c","zIndex","transform","propTypes","array","func","bool","number","oneOfType","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Measure from 'react-measure'\nimport { Transition, animated, interpolate } from 'react-spring/renderprops'\n\nconst styles = {\n  outer: { position: 'absolute', width: '800px', height: '800px' },\n  inner: {\n    position: 'relative',\n    width: '100%',\n    overflow: 'hidden',\n    minHeight: '100%',\n  },\n  cell: {\n    position: 'absolute',\n    willChange: 'transform, width, height, opacity',\n  },\n}\n\nexport default class Grid extends React.Component {\n  static propTypes = {\n    data: PropTypes.array,\n    keys: PropTypes.func,\n    occupySpace: PropTypes.bool,\n    columns: PropTypes.number,\n    margin: PropTypes.number,\n    heights: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n    lockScroll: PropTypes.bool,\n    closeDelay: PropTypes.number,\n  }\n  static defaultProps = {\n    occupySpace: true,\n    columns: 3,\n    margin: 0,\n    heights: 100,\n    lockScroll: false,\n    closeDelay: 0,\n  }\n  state = { width: 0, height: 0, open: undefined, lastOpen: undefined }\n  scrollOut = e => {\n    if (!this.props.lockScroll) {\n      this.state.open && this.toggle(undefined)\n      this.clicked = false\n    }\n  }\n  toggle = key =>\n    this.setState(\n      state => ({\n        lastOpen: state.open,\n        open: state.open === key ? undefined : key,\n      }),\n      () => (this.clicked = true)\n    )\n  resize = (width, height, props) =>\n    this.setState({\n      [width]: props.client.width,\n      [height]: props.client.height,\n    })\n  resizeOuter = props => this.resize('widthOuter', 'heightOuter', props)\n  resizeInner = props => this.resize('width', 'height', props)\n  update = ({ key, x, y, width, height }) => {\n    const open = this.state.open === key\n    return {\n      opacity: this.state.open && !open ? 0 : 1,\n      x: open ? this.outerRef.scrollLeft : x,\n      y: open ? this.outerRef.scrollTop : y,\n      width: open ? this.state.width : width,\n      height: open ? this.state.heightOuter : height,\n    }\n  }\n\n  componentDidUpdate() {\n    this.clicked = false\n  }\n\n  render() {\n    let {\n      children,\n      columns,\n      margin,\n      occupySpace,\n      impl,\n      config,\n      data,\n      keys,\n      heights,\n      closeDelay,\n      lockScroll,\n      ...rest\n    } = this.props\n    let { lastOpen, open, width } = this.state\n    let column = 0\n    let columnHeights = new Array(columns).fill(0)\n\n    let displayData = data.map((child, i) => {\n      let index = occupySpace\n        ? columnHeights.indexOf(Math.min(...columnHeights))\n        : column++ % columns\n      let cellWidth = width / columns - margin / (1 - 1 / (columns + 1))\n      let left = cellWidth * index\n      let offset = (index + 1) * margin\n      let top = columnHeights[index] + margin\n      let height = typeof heights === 'function' ? heights(child) : heights\n      columnHeights[index] += height + margin\n      return {\n        x: margin ? left + offset : left,\n        y: top,\n        width: cellWidth,\n        height,\n        key: keys(child),\n        object: child,\n      }\n    })\n    const overflow = lockScroll ? (open ? 'hidden' : 'auto') : 'auto'\n    const height = Math.max(...columnHeights) + margin\n    return (\n      <Measure\n        client\n        innerRef={r => (this.outerRef = r)}\n        onResize={this.resizeOuter}>\n        {({ measureRef }) => (\n          <div\n            ref={measureRef}\n            style={{ ...styles.outer, ...this.props.style, overflow }}\n            {...rest}\n            onScroll={this.scrollOut}\n            onWheel={this.scrollOut}\n            onTouchMove={this.scrollOut}>\n            <Measure\n              client\n              innerRef={r => (this.innerRef = r)}\n              onResize={this.resizeInner}>\n              {({ measureRef }) => (\n                <div ref={measureRef} style={{ ...styles.inner, height }}>\n                  <Transition\n                    native\n                    items={displayData}\n                    keys={d => d.key}\n                    from={{ opacity: 0 }}\n                    leave={{ opacity: 0 }}\n                    enter={this.update}\n                    update={this.update}\n                    impl={impl}\n                    config={{\n                      ...config,\n                      delay: this.clicked && !open ? closeDelay : 0,\n                    }}>\n                    {(c, i) => ({ opacity, x, y, width, height }) => (\n                      <animated.div\n                        style={{\n                          ...styles.cell,\n                          opacity,\n                          width,\n                          height,\n                          zIndex:\n                            lastOpen === c.key || open === c.key ? 1000 : i,\n                          transform: interpolate(\n                            [x, y],\n                            (x, y) => `translate3d(${x}px,${y}px, 0)`\n                          ),\n                        }}\n                        children={children(c.object, open === c.key, () =>\n                          this.toggle(c.key)\n                        )}\n                      />\n                    )}\n                  </Transition>\n                </div>\n              )}\n            </Measure>\n          </div>\n        )}\n      </Measure>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}